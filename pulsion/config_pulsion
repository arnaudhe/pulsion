#!/bin/bash

development_folder="project"
output_folder="output"
tests_folder="tests"
temporary_fusion_folder="$TEMPORARY_FOLDER/fusion"
fusioned_file_path="$output_folder/pulsion"
fusioned_file_path_fail="$output_folder/pulsion_fusion_failed"
console_project_path="$development_folder/pulsion"
config_test_path="$tests_folder/config/pulsion/config_pulsion"

function command_update-to-local-version {

	function help {

		echo -e "Update Pulsion script to the merged version"

	}

	function process {

		require_root

		if [ -f "$output_folder/pulsion" ]; then

			rm pulsion/pulsion
			cp $output_folder/pulsion pulsion/pulsion

		fi

	}

}

function command_test {

	function help {

		echo "Launch the tests on project folder by default"
		echo "  -f      Launch the tests on merged file success"
		echo "  -ff     Launch the tests on merged file failed"
		echo "  --local Use local tmp folder to test"

	}

	function process {
		
		TEMP_FOLDER_PULSION_TEST=""
		if hasParam --local "$@"; then
			echo -e "\n- Initialize (local mode)"
			TEMP_FOLDER_PULSION_TEST="pulsion/tmp/tests"
		else
			echo -e "\n- Initialize (/tmp mode)"
			require_root
		fi

		# Choose the console to test
		console=$console_project_path
		mode="Development mode"

		if hasParam -f "$@"; then
			console=$fusioned_file_path
			mode="Fusion mode"
		elif hasParam -ff "$@"; then
			console=$fusioned_file_path_fail
			mode="Fusion fail mode"
		fi

		echo -e "- Load the tests with : $mode \n"

		# Test the development version
		for test_file in tests/test_*
		do
			echo "- Test the file $test_file"
			./pulsion/extern/shunit2 "$test_file" "$console" "$TEMP_FOLDER_PULSION_TEST" "$config_test_path" \
			| sed -e 's/^/  -/' | sed -e 's/-ASSERT/  -ASSERT/g'
			echo;
		done

	}

}

function command_fusion {

	function help {

		echo "Fusion all the project folder's scripts in one file and execute the tests if necessary"
		echo "  -t         Launch the test on the merged file if success"
		echo "  -t --force Force to launch the tests on file merged failed if failed"
		echo "  --local    Use local tmp folder to compile and test"

	}

	function process {

		if hasParam --local "$@"; then
			echo -e "\n- Initialize fusion tool (local mode)"
			TEMPORARY_FOLDER="pulsion/tmp"
			temporary_fusion_folder="$TEMPORARY_FOLDER/fusion"
		else
			echo -e "\n- Initialize fusion tool (/tmp mode)"
			require_root
		fi

		mkdir -p $temporary_fusion_folder
		tmp_fusioned_file="$temporary_fusion_folder/$RANDOM"
		tests_option=0
		sed_options="-i"

		if [[ $(get_platform) == "osx" ]]; then
			sed_options="-i ''"
		fi

		echo -e "\n- Read #include instructions"

		# get an array of files to include detect with syntax "\. [the file] #include"
		cat $console_project_path > $tmp_fusioned_file
		sources=(`cat $console_project_path | grep -E "\. (.*?) #include" | awk -F " " '{print $2}'`)
		success=1

		echo -e "\n- Fusion in progress"

		for file in ${sources[@]}
		do

			# if the file to include exists
			if [ -f $file ]; then

				# define the #include line to replace
				old=$(echo "\. $file #include" | sed 's/\//\\\//g')

				# get and escape all the content of the target file
				new=$(tail -n +2 $file | sed 's/\\/\\\\/g' | sed 's/\//\\\//g' | sed 's/&/\\&/g' | sed -e 'H;${x;s/\n/||||||/g;s/^,//;p;};d')

				# replace the content in temporary file
				sed $sed_options "s/$old/$new/g" $tmp_fusioned_file
				sed $sed_options 's/||||||/\'$'\n/g' $tmp_fusioned_file
				echo "  - fusioned $file"

			else

				# remove the include line
				old=$(echo "\. $file #include" | sed 's/\//\\\//g')
				sed $sed_options "s/$old//g" $tmp_fusioned_file

				echo "  - not found $file"
				success=0
				
			fi

		done

		# display the result
		if [ $success -eq 0 ]; then
			fusion_state="failed"
			fusion_output=$fusioned_file_path_fail

			# Program automatic launch of the test on fail minimized file
			if hasParam -t "$@"; then
				if hasParam --force "$@"; then
					tests_option="-ff"
				fi
				if hasParam --local "$@"; then
					tests_option="$tests_option --local"
				fi
			fi

		else
			fusion_state="succeed"
			fusion_output=$fusioned_file_path

			# Program automatic launch of the test on fail minimized file
			if hasParam -t "$@"; then
				tests_option="-f"
				if hasParam --local "$@"; then
					tests_option="$tests_option --local"
				fi
			fi
		fi

		cp $tmp_fusioned_file $fusion_output
		chmod +x $fusion_output

		echo -e "\n- Fusion $fusion_state"
		echo -e "  - script available under $fusion_output"

		# Launch the tests if necessary
		if [[ $tests_option != 0 ]]; then
			echo -e "  - launch the tests\n"
			echo -e "--------------------------------------------------------\n"
			$LOCAL_SCRIPT_PULSION_PATH test $tests_option -c $CONFIG_FILE
		else
			echo "  - don't launch the tests (-h for more informations)"
		fi

		echo;

		# Remove temporary folder
		rm -Rf $TEMPORARY_FOLDER
	}

}

