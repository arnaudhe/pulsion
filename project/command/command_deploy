#!/bin/bash

# Use file DEPLOYMENT_CONFURATION_FILE_PATH="config/deploy_config"

function command_deploy {

	# Define project_folder, config_folder and deploy_folder
	project_folder="$SCRIPT_PATH/project"
	config_folder="$SCRIPT_PATH/config"
	deploy_folder="" # No default value

	function help {

		echo ""
		echo "Deploy depending on $DEPLOYMENT_CONFURATION_FILE_PATH file"
		echo "Usage : deploy"
		echo "    -p [project name] Specify a project name (default: 'project')"
		echo "    --force           Erase content of deploy folder without ask"
		echo "    -v 3              Details about copied and erased files"

		# Load config_pulsion deployment module depending on project_name { default: "project" }
		deploy_name="project"
		if hasParam -p "$@"; then
			deploy_name="$(getParamValue -p "$@")"
			if [[ $deploy_name == "" ]]; then return 0; fi
		fi
		if ! is_function_exist deploy_$deploy_name; then return 0; fi
		deploy_$deploy_name
		help

	}

	function process {
		
		verbose 1 "- Load deploy configuration"

		# Load the deploy_config file { default: "config/deploy_config", defined: "environment_variables" }
		if [ ! -f "$DEPLOYMENT_CONFURATION_FILE_PATH" ]; then
			verbose 1 "  - File '$DEPLOYMENT_CONFURATION_FILE_PATH' does not exist and must contain configuration file."
			verbose 1 "  - Maybe you must implement '$(echo $DEPLOYMENT_CONFURATION_FILE_PATH)_default' file."
			return 1
		fi

		. "$DEPLOYMENT_CONFURATION_FILE_PATH"

		# Load config_pulsion deployment module depending on project_name { default: "project" }
		deploy_name="project"
		if hasParam -p "$@"; then
			deploy_name="$(getParamValue -p "$@")"
			if [[ $deploy_name == "" ]]; then verbose 1 "  - Project non specified with option -p"; return 1; fi
		fi

		if ! is_function_exist deploy_$deploy_name; then
			verbose 1 "  - Don't found implementation for deploy_$deploy_name"
			return 1
		fi

		verbose 1 "- Read "deploy_$deploy_name" project"
		deploy_$deploy_name

		# Default folder path define in head

		## Project folder
		if [[ $DEPLOY_CONF_FOLDER_PROJECT != "" ]]; then
			if [ $(echo "$DEPLOY_CONF_FOLDER_PROJECT" | grep -c "^\/") -eq 1 ]; then
				project_folder="$DEPLOY_CONF_FOLDER_PROJECT";
			else
				project_folder="$SCRIPT_PATH/$DEPLOY_CONF_FOLDER_PROJECT";
			fi
		fi
		## Config folder
		if [[ $DEPLOY_CONF_FOLDER_CONFIG != "" ]]; then
			if [ $(echo "$DEPLOY_CONF_FOLDER_CONFIG" | grep -c "^\/") -eq 1 ]; then
				config_folder="$DEPLOY_CONF_FOLDER_CONFIG";
			else
				config_folder="$SCRIPT_PATH/$DEPLOY_CONF_FOLDER_CONFIG";
			fi
		fi
		## Deploy folder
		if [[ $DEPLOY_CONF_FOLDER_DEPLOY != "" ]]; then
			if [ $(echo "$DEPLOY_CONF_FOLDER_DEPLOY" | grep -c "^\/") -eq 1 ]; then
				deploy_folder="$DEPLOY_CONF_FOLDER_DEPLOY";
			else
				deploy_folder="$SCRIPT_PATH/$DEPLOY_CONF_FOLDER_DEPLOY";
			fi
		else
			# deploy_folder must be configured in deploy_config
			verbose 1 "  - \$DEPLOY_CONF_FOLDER_DEPLOY is not defined in $DEPLOYMENT_CONFURATION_FILE_PATH"
			return 1
		fi

		# Prepare commands name
		pre_cmd="pre_actions_in_local_folder_default"
		list_local_cmd="list_local_files_to_export_default"
		list_deploy_cmd="list_deploy_files_to_remove_default"
		post_cmd="post_actions_in_config_folder_default"
		if is_function_exist pre_actions_in_local_folder; then pre_cmd="pre_actions_in_local_folder"; fi
		if is_function_exist list_local_files_to_export; then list_local_cmd="list_local_files_to_export"; fi
		if is_function_exist list_deploy_files_to_remove; then list_deploy_cmd="list_deploy_files_to_remove"; fi
		if is_function_exist post_actions_in_config_folder; then post_cmd="post_actions_in_config_folder"; fi

		# Deploying
		verbose 1 "- Deploying..."

		(IFS=$'\n'

			# Empty deployment folder or create it
			verbose 1 "  - Deploy folder"
			if [ -d $deploy_folder ]; then
	 			
	 			# Deploy folder exist
	 			if [ "$(ls -A $deploy_folder)" ] && ! hasParam --force "$@"; then
		 			read -p "    - $deploy_folder content will be erase. Are you sure ? (y/n) " answer
		 			if [[ $answer != "y" ]]; then
		 				verbose 1 "      - Abort deploy"
		 				return 1
		 			fi
		 		fi

		 		verbose 1 "    - Erase"
	 			cd $deploy_folder
	 			for f in $($list_deploy_cmd "$@")
	 			do
	 				if [[ $f != "." ]] && [[ $f != ".." ]]; then
	 					rm -Rf "$f"
	 					verbose 3 "      * Remove $f"
	 				fi
	 			done
		 	else
		 		verbose 1 "    - Create"
		 		mkdir -p $deploy_folder
			fi

			# Verify if root is necessary to copy in destination folder
			if [ ! -w $deploy_folder ]; then
				verbose 1 "Deploy folder require sudo permissions"
				require_root
			fi

			# Copying files
			cd $project_folder
			
			verbose 1 "  - Launch pre-actions in local folder"
			$pre_cmd "$@"

			verbose 1 "  - Copying files from local to deploy folder..."
			# Get the full name of 
			for initial_file in $($list_local_cmd "$@")
			do
				if [[ $initial_file != "." ]] && [[ $initial_file != ".." ]]; then

					file=$(echo $initial_file)
					filename=$(basename $file)
					path=$(dirname $file)

					# Gère les fichier à la racine du projet
					if [ $(echo $file | grep -c "/") -eq 0 ]; then
						verbose 3 "    * Copy $filename"
						cp -R "$initial_file" "$deploy_folder"
					else
						verbose 3 "    * Copy $path/$filename"
						mkdir -p "$deploy_folder/$path"
						cp -R "$initial_file" "$deploy_folder/$path"
					fi

				fi
			done

			# Execute post actions in the config folder
			verbose 1 "  - Launch post-actions in config folder"
			cd $config_folder
			$post_cmd "$@"

		)

	}

	function pre_actions_in_local_folder_default { # In local folder

		return 0

	}

	function list_local_files_to_export_default { # In local folder

		ls -a .

	}

	function list_deploy_files_to_remove_default { # In deploy folder

		ls -a .

	}

	function post_actions_in_config_folder_default { # In config folder

		return 0

	}

	function get_local_folder {

		echo "$project_folder"

	}

	function get_config_folder {

		echo "$config_folder"

	}

	function get_deploy_folder {

		echo "$deploy_folder"

	}


}
